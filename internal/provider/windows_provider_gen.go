// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/provider/schema"
)

func WindowsProviderSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"endpoint": schema.StringAttribute{
				Required:            true,
				Description:         "Define the hostname or ip-address of the target Windows system. Can be set via 'WIN_ENDPOINT' environment variable.",
				MarkdownDescription: "Define the hostname or ip-address of the target Windows system. Can be set via 'WIN_ENDPOINT' environment variable.",
			},
			"ssh": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"insecure": schema.BoolAttribute{
						Optional:            true,
						Description:         "Accept insecure SSH connections. This includes e.g. the acceptance of unknown or changed host keys. Default value is 'false'. Can be set via 'WIN_SSH_INSECURE' environment variable.",
						MarkdownDescription: "Accept insecure SSH connections. This includes e.g. the acceptance of unknown or changed host keys. Default value is 'false'. Can be set via 'WIN_SSH_INSECURE' environment variable.",
					},
					"known_hosts_path": schema.StringAttribute{
						Optional:            true,
						Description:         "Define the path to the known hosts file to connect with the target Windows system. Can be set via 'WIN_SSH_KNOWN_HOSTS_PATH' environment variable.",
						MarkdownDescription: "Define the path to the known hosts file to connect with the target Windows system. Can be set via 'WIN_SSH_KNOWN_HOSTS_PATH' environment variable.",
					},
					"password": schema.StringAttribute{
						Optional:            true,
						Sensitive:           true,
						Description:         "Define the password to connect with the target Windows system. Exactly one of 'password', 'private_key' or 'private_key_path' is required if ssh is set. Can be set via 'WIN_SSH_PASSWORD' environment variable.",
						MarkdownDescription: "Define the password to connect with the target Windows system. Exactly one of 'password', 'private_key' or 'private_key_path' is required if ssh is set. Can be set via 'WIN_SSH_PASSWORD' environment variable.",
					},
					"port": schema.Int64Attribute{
						Optional:            true,
						Description:         "Define the port to connect with the target Windows system. Can be set via 'WIN_SSH_PORT' environment variable.",
						MarkdownDescription: "Define the port to connect with the target Windows system. Can be set via 'WIN_SSH_PORT' environment variable.",
					},
					"private_key": schema.StringAttribute{
						Optional:            true,
						Sensitive:           true,
						Description:         "Define the private key to connect with the target Windows system. Exactly one of 'password', 'private_key' or 'private_key_path' is required if ssh is set. Can be set via 'WIN_SSH_PRIVATE_KEY' environment variable.",
						MarkdownDescription: "Define the private key to connect with the target Windows system. Exactly one of 'password', 'private_key' or 'private_key_path' is required if ssh is set. Can be set via 'WIN_SSH_PRIVATE_KEY' environment variable.",
					},
					"private_key_path": schema.StringAttribute{
						Optional:            true,
						Description:         "Define the path to the private key file to connect with the target Windows system. Exactly one of 'password', 'private_key' or 'private_key_path' is required if ssh is set. Can be set via 'WIN_SSH_PRIVATE_KEY_PATH' environment variable.",
						MarkdownDescription: "Define the path to the private key file to connect with the target Windows system. Exactly one of 'password', 'private_key' or 'private_key_path' is required if ssh is set. Can be set via 'WIN_SSH_PRIVATE_KEY_PATH' environment variable.",
					},
					"username": schema.StringAttribute{
						Optional:            true,
						Description:         "Define the username to connect with the target Windows system. Required if ssh is set. Can be set via 'WIN_SSH_USERNAME' environment variable.",
						MarkdownDescription: "Define the username to connect with the target Windows system. Required if ssh is set. Can be set via 'WIN_SSH_USERNAME' environment variable.",
					},
				},
				CustomType: SshType{
					ObjectType: types.ObjectType{
						AttrTypes: SshValue{}.AttributeTypes(ctx),
					},
				},
				Optional:            true,
				Description:         "Define the SSH connection parameters. Exactly one of 'winrm' or 'ssh' must be set for the provider to connect to a Windows target system. Define an empty 'ssh' attribute if you wish to use the environment variables.",
				MarkdownDescription: "Define the SSH connection parameters. Exactly one of 'winrm' or 'ssh' must be set for the provider to connect to a Windows target system. Define an empty 'ssh' attribute if you wish to use the environment variables.",
			},
			"winrm": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"insecure": schema.BoolAttribute{
						Optional:            true,
						Description:         "Accept insecure WinRM connection. This includes e.g. the acceptance of untrusted certificates. Default value is 'false'. Can be set via 'WIN_WINRM_INSECURE' environment variable.",
						MarkdownDescription: "Accept insecure WinRM connection. This includes e.g. the acceptance of untrusted certificates. Default value is 'false'. Can be set via 'WIN_WINRM_INSECURE' environment variable.",
					},
					"kerberos": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{
							"krb_config_file": schema.StringAttribute{
								Optional:            true,
								Description:         "Define the path to the kerberos configuration file. Required if kerberos is set. Can be set via 'WIN_KERBEROS_KRB_CONFIG_FILE' environment variable.",
								MarkdownDescription: "Define the path to the kerberos configuration file. Required if kerberos is set. Can be set via 'WIN_KERBEROS_KRB_CONFIG_FILE' environment variable.",
							},
							"realm": schema.StringAttribute{
								Optional:            true,
								Description:         "Define the Kerberos realm. Required if kerberos is set. Can be set via 'WIN_KERBEROS_REALM' environment variable.",
								MarkdownDescription: "Define the Kerberos realm. Required if kerberos is set. Can be set via 'WIN_KERBEROS_REALM' environment variable.",
							},
						},
						CustomType: KerberosType{
							ObjectType: types.ObjectType{
								AttrTypes: KerberosValue{}.AttributeTypes(ctx),
							},
						},
						Optional: true,
					},
					"password": schema.StringAttribute{
						Optional:            true,
						Sensitive:           true,
						Description:         "Define the password to connect with the target Windows system. Required if winrm is set. Can be set via 'WIN_WINRM_PASSWORD' environment variable.",
						MarkdownDescription: "Define the password to connect with the target Windows system. Required if winrm is set. Can be set via 'WIN_WINRM_PASSWORD' environment variable.",
					},
					"port": schema.Int64Attribute{
						Optional:            true,
						Description:         "Define the port to connect with the target Windows system. Default value is '5986'. Can be set via 'WIN_WINRM_PORT' environment variable.",
						MarkdownDescription: "Define the port to connect with the target Windows system. Default value is '5986'. Can be set via 'WIN_WINRM_PORT' environment variable.",
					},
					"protocol": schema.StringAttribute{
						Optional:            true,
						Description:         "Define the protocol to connect with the target Windows system. Default value is 'https'. Can be set via 'WIN_WINRM_PROTOCOL' environment variable.",
						MarkdownDescription: "Define the protocol to connect with the target Windows system. Default value is 'https'. Can be set via 'WIN_WINRM_PROTOCOL' environment variable.",
					},
					"timeout": schema.Int64Attribute{
						Optional:            true,
						Description:         "Define the connection timeout in minutes for the target Windows system. Can be set via 'WIN_WINRM_TIMEOUT' environment variable.",
						MarkdownDescription: "Define the connection timeout in minutes for the target Windows system. Can be set via 'WIN_WINRM_TIMEOUT' environment variable.",
					},
					"username": schema.StringAttribute{
						Optional:            true,
						Description:         "Define the username to connect with the target Windows system. Required if winrm is set. Can be set via 'WIN_WINRM_USERNAME' environment variable.",
						MarkdownDescription: "Define the username to connect with the target Windows system. Required if winrm is set. Can be set via 'WIN_WINRM_USERNAME' environment variable.",
					},
				},
				CustomType: WinrmType{
					ObjectType: types.ObjectType{
						AttrTypes: WinrmValue{}.AttributeTypes(ctx),
					},
				},
				Optional:            true,
				Description:         "Define the WinRM connection parameters. Exactly one of 'winrm' or 'ssh' must be set for the provider to connect to a Windows target system. Define an empty 'winrm' attribute if you wish to use the environment variables.",
				MarkdownDescription: "Define the WinRM connection parameters. Exactly one of 'winrm' or 'ssh' must be set for the provider to connect to a Windows target system. Define an empty 'winrm' attribute if you wish to use the environment variables.",
			},
		},
	}
}

type WindowsModel struct {
	Endpoint types.String `tfsdk:"endpoint"`
	Ssh      SshValue     `tfsdk:"ssh"`
	Winrm    WinrmValue   `tfsdk:"winrm"`
}

var _ basetypes.ObjectTypable = SshType{}

type SshType struct {
	basetypes.ObjectType
}

func (t SshType) Equal(o attr.Type) bool {
	other, ok := o.(SshType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t SshType) String() string {
	return "SshType"
}

func (t SshType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	insecureAttribute, ok := attributes["insecure"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`insecure is missing from object`)

		return nil, diags
	}

	insecureVal, ok := insecureAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`insecure expected to be basetypes.BoolValue, was: %T`, insecureAttribute))
	}

	knownHostsPathAttribute, ok := attributes["known_hosts_path"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`known_hosts_path is missing from object`)

		return nil, diags
	}

	knownHostsPathVal, ok := knownHostsPathAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`known_hosts_path expected to be basetypes.StringValue, was: %T`, knownHostsPathAttribute))
	}

	passwordAttribute, ok := attributes["password"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`password is missing from object`)

		return nil, diags
	}

	passwordVal, ok := passwordAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`password expected to be basetypes.StringValue, was: %T`, passwordAttribute))
	}

	portAttribute, ok := attributes["port"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`port is missing from object`)

		return nil, diags
	}

	portVal, ok := portAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`port expected to be basetypes.Int64Value, was: %T`, portAttribute))
	}

	privateKeyAttribute, ok := attributes["private_key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`private_key is missing from object`)

		return nil, diags
	}

	privateKeyVal, ok := privateKeyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`private_key expected to be basetypes.StringValue, was: %T`, privateKeyAttribute))
	}

	privateKeyPathAttribute, ok := attributes["private_key_path"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`private_key_path is missing from object`)

		return nil, diags
	}

	privateKeyPathVal, ok := privateKeyPathAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`private_key_path expected to be basetypes.StringValue, was: %T`, privateKeyPathAttribute))
	}

	usernameAttribute, ok := attributes["username"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`username is missing from object`)

		return nil, diags
	}

	usernameVal, ok := usernameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`username expected to be basetypes.StringValue, was: %T`, usernameAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return SshValue{
		Insecure:       insecureVal,
		KnownHostsPath: knownHostsPathVal,
		Password:       passwordVal,
		Port:           portVal,
		PrivateKey:     privateKeyVal,
		PrivateKeyPath: privateKeyPathVal,
		Username:       usernameVal,
		state:          attr.ValueStateKnown,
	}, diags
}

func NewSshValueNull() SshValue {
	return SshValue{
		state: attr.ValueStateNull,
	}
}

func NewSshValueUnknown() SshValue {
	return SshValue{
		state: attr.ValueStateUnknown,
	}
}

func NewSshValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (SshValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing SshValue Attribute Value",
				"While creating a SshValue value, a missing attribute value was detected. "+
					"A SshValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SshValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid SshValue Attribute Type",
				"While creating a SshValue value, an invalid attribute value was detected. "+
					"A SshValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SshValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("SshValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra SshValue Attribute Value",
				"While creating a SshValue value, an extra attribute value was detected. "+
					"A SshValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra SshValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewSshValueUnknown(), diags
	}

	insecureAttribute, ok := attributes["insecure"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`insecure is missing from object`)

		return NewSshValueUnknown(), diags
	}

	insecureVal, ok := insecureAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`insecure expected to be basetypes.BoolValue, was: %T`, insecureAttribute))
	}

	knownHostsPathAttribute, ok := attributes["known_hosts_path"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`known_hosts_path is missing from object`)

		return NewSshValueUnknown(), diags
	}

	knownHostsPathVal, ok := knownHostsPathAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`known_hosts_path expected to be basetypes.StringValue, was: %T`, knownHostsPathAttribute))
	}

	passwordAttribute, ok := attributes["password"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`password is missing from object`)

		return NewSshValueUnknown(), diags
	}

	passwordVal, ok := passwordAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`password expected to be basetypes.StringValue, was: %T`, passwordAttribute))
	}

	portAttribute, ok := attributes["port"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`port is missing from object`)

		return NewSshValueUnknown(), diags
	}

	portVal, ok := portAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`port expected to be basetypes.Int64Value, was: %T`, portAttribute))
	}

	privateKeyAttribute, ok := attributes["private_key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`private_key is missing from object`)

		return NewSshValueUnknown(), diags
	}

	privateKeyVal, ok := privateKeyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`private_key expected to be basetypes.StringValue, was: %T`, privateKeyAttribute))
	}

	privateKeyPathAttribute, ok := attributes["private_key_path"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`private_key_path is missing from object`)

		return NewSshValueUnknown(), diags
	}

	privateKeyPathVal, ok := privateKeyPathAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`private_key_path expected to be basetypes.StringValue, was: %T`, privateKeyPathAttribute))
	}

	usernameAttribute, ok := attributes["username"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`username is missing from object`)

		return NewSshValueUnknown(), diags
	}

	usernameVal, ok := usernameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`username expected to be basetypes.StringValue, was: %T`, usernameAttribute))
	}

	if diags.HasError() {
		return NewSshValueUnknown(), diags
	}

	return SshValue{
		Insecure:       insecureVal,
		KnownHostsPath: knownHostsPathVal,
		Password:       passwordVal,
		Port:           portVal,
		PrivateKey:     privateKeyVal,
		PrivateKeyPath: privateKeyPathVal,
		Username:       usernameVal,
		state:          attr.ValueStateKnown,
	}, diags
}

func NewSshValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) SshValue {
	object, diags := NewSshValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewSshValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t SshType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewSshValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewSshValueUnknown(), nil
	}

	if in.IsNull() {
		return NewSshValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewSshValueMust(SshValue{}.AttributeTypes(ctx), attributes), nil
}

func (t SshType) ValueType(ctx context.Context) attr.Value {
	return SshValue{}
}

var _ basetypes.ObjectValuable = SshValue{}

type SshValue struct {
	Insecure       basetypes.BoolValue   `tfsdk:"insecure"`
	KnownHostsPath basetypes.StringValue `tfsdk:"known_hosts_path"`
	Password       basetypes.StringValue `tfsdk:"password"`
	Port           basetypes.Int64Value  `tfsdk:"port"`
	PrivateKey     basetypes.StringValue `tfsdk:"private_key"`
	PrivateKeyPath basetypes.StringValue `tfsdk:"private_key_path"`
	Username       basetypes.StringValue `tfsdk:"username"`
	state          attr.ValueState
}

func (v SshValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 7)

	var val tftypes.Value
	var err error

	attrTypes["insecure"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["known_hosts_path"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["password"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["port"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["private_key"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["private_key_path"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["username"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 7)

		val, err = v.Insecure.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["insecure"] = val

		val, err = v.KnownHostsPath.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["known_hosts_path"] = val

		val, err = v.Password.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["password"] = val

		val, err = v.Port.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["port"] = val

		val, err = v.PrivateKey.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["private_key"] = val

		val, err = v.PrivateKeyPath.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["private_key_path"] = val

		val, err = v.Username.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["username"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v SshValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v SshValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v SshValue) String() string {
	return "SshValue"
}

func (v SshValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"insecure":         basetypes.BoolType{},
			"known_hosts_path": basetypes.StringType{},
			"password":         basetypes.StringType{},
			"port":             basetypes.Int64Type{},
			"private_key":      basetypes.StringType{},
			"private_key_path": basetypes.StringType{},
			"username":         basetypes.StringType{},
		},
		map[string]attr.Value{
			"insecure":         v.Insecure,
			"known_hosts_path": v.KnownHostsPath,
			"password":         v.Password,
			"port":             v.Port,
			"private_key":      v.PrivateKey,
			"private_key_path": v.PrivateKeyPath,
			"username":         v.Username,
		})

	return objVal, diags
}

func (v SshValue) Equal(o attr.Value) bool {
	other, ok := o.(SshValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Insecure.Equal(other.Insecure) {
		return false
	}

	if !v.KnownHostsPath.Equal(other.KnownHostsPath) {
		return false
	}

	if !v.Password.Equal(other.Password) {
		return false
	}

	if !v.Port.Equal(other.Port) {
		return false
	}

	if !v.PrivateKey.Equal(other.PrivateKey) {
		return false
	}

	if !v.PrivateKeyPath.Equal(other.PrivateKeyPath) {
		return false
	}

	if !v.Username.Equal(other.Username) {
		return false
	}

	return true
}

func (v SshValue) Type(ctx context.Context) attr.Type {
	return SshType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v SshValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"insecure":         basetypes.BoolType{},
		"known_hosts_path": basetypes.StringType{},
		"password":         basetypes.StringType{},
		"port":             basetypes.Int64Type{},
		"private_key":      basetypes.StringType{},
		"private_key_path": basetypes.StringType{},
		"username":         basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = WinrmType{}

type WinrmType struct {
	basetypes.ObjectType
}

func (t WinrmType) Equal(o attr.Type) bool {
	other, ok := o.(WinrmType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t WinrmType) String() string {
	return "WinrmType"
}

func (t WinrmType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	insecureAttribute, ok := attributes["insecure"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`insecure is missing from object`)

		return nil, diags
	}

	insecureVal, ok := insecureAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`insecure expected to be basetypes.BoolValue, was: %T`, insecureAttribute))
	}

	kerberosAttribute, ok := attributes["kerberos"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`kerberos is missing from object`)

		return nil, diags
	}

	kerberosVal, ok := kerberosAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`kerberos expected to be basetypes.ObjectValue, was: %T`, kerberosAttribute))
	}

	passwordAttribute, ok := attributes["password"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`password is missing from object`)

		return nil, diags
	}

	passwordVal, ok := passwordAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`password expected to be basetypes.StringValue, was: %T`, passwordAttribute))
	}

	portAttribute, ok := attributes["port"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`port is missing from object`)

		return nil, diags
	}

	portVal, ok := portAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`port expected to be basetypes.Int64Value, was: %T`, portAttribute))
	}

	protocolAttribute, ok := attributes["protocol"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`protocol is missing from object`)

		return nil, diags
	}

	protocolVal, ok := protocolAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`protocol expected to be basetypes.StringValue, was: %T`, protocolAttribute))
	}

	timeoutAttribute, ok := attributes["timeout"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`timeout is missing from object`)

		return nil, diags
	}

	timeoutVal, ok := timeoutAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`timeout expected to be basetypes.Int64Value, was: %T`, timeoutAttribute))
	}

	usernameAttribute, ok := attributes["username"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`username is missing from object`)

		return nil, diags
	}

	usernameVal, ok := usernameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`username expected to be basetypes.StringValue, was: %T`, usernameAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return WinrmValue{
		Insecure: insecureVal,
		Kerberos: kerberosVal,
		Password: passwordVal,
		Port:     portVal,
		Protocol: protocolVal,
		Timeout:  timeoutVal,
		Username: usernameVal,
		state:    attr.ValueStateKnown,
	}, diags
}

func NewWinrmValueNull() WinrmValue {
	return WinrmValue{
		state: attr.ValueStateNull,
	}
}

func NewWinrmValueUnknown() WinrmValue {
	return WinrmValue{
		state: attr.ValueStateUnknown,
	}
}

func NewWinrmValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (WinrmValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing WinrmValue Attribute Value",
				"While creating a WinrmValue value, a missing attribute value was detected. "+
					"A WinrmValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("WinrmValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid WinrmValue Attribute Type",
				"While creating a WinrmValue value, an invalid attribute value was detected. "+
					"A WinrmValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("WinrmValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("WinrmValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra WinrmValue Attribute Value",
				"While creating a WinrmValue value, an extra attribute value was detected. "+
					"A WinrmValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra WinrmValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewWinrmValueUnknown(), diags
	}

	insecureAttribute, ok := attributes["insecure"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`insecure is missing from object`)

		return NewWinrmValueUnknown(), diags
	}

	insecureVal, ok := insecureAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`insecure expected to be basetypes.BoolValue, was: %T`, insecureAttribute))
	}

	kerberosAttribute, ok := attributes["kerberos"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`kerberos is missing from object`)

		return NewWinrmValueUnknown(), diags
	}

	kerberosVal, ok := kerberosAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`kerberos expected to be basetypes.ObjectValue, was: %T`, kerberosAttribute))
	}

	passwordAttribute, ok := attributes["password"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`password is missing from object`)

		return NewWinrmValueUnknown(), diags
	}

	passwordVal, ok := passwordAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`password expected to be basetypes.StringValue, was: %T`, passwordAttribute))
	}

	portAttribute, ok := attributes["port"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`port is missing from object`)

		return NewWinrmValueUnknown(), diags
	}

	portVal, ok := portAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`port expected to be basetypes.Int64Value, was: %T`, portAttribute))
	}

	protocolAttribute, ok := attributes["protocol"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`protocol is missing from object`)

		return NewWinrmValueUnknown(), diags
	}

	protocolVal, ok := protocolAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`protocol expected to be basetypes.StringValue, was: %T`, protocolAttribute))
	}

	timeoutAttribute, ok := attributes["timeout"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`timeout is missing from object`)

		return NewWinrmValueUnknown(), diags
	}

	timeoutVal, ok := timeoutAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`timeout expected to be basetypes.Int64Value, was: %T`, timeoutAttribute))
	}

	usernameAttribute, ok := attributes["username"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`username is missing from object`)

		return NewWinrmValueUnknown(), diags
	}

	usernameVal, ok := usernameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`username expected to be basetypes.StringValue, was: %T`, usernameAttribute))
	}

	if diags.HasError() {
		return NewWinrmValueUnknown(), diags
	}

	return WinrmValue{
		Insecure: insecureVal,
		Kerberos: kerberosVal,
		Password: passwordVal,
		Port:     portVal,
		Protocol: protocolVal,
		Timeout:  timeoutVal,
		Username: usernameVal,
		state:    attr.ValueStateKnown,
	}, diags
}

func NewWinrmValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) WinrmValue {
	object, diags := NewWinrmValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewWinrmValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t WinrmType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewWinrmValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewWinrmValueUnknown(), nil
	}

	if in.IsNull() {
		return NewWinrmValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewWinrmValueMust(WinrmValue{}.AttributeTypes(ctx), attributes), nil
}

func (t WinrmType) ValueType(ctx context.Context) attr.Value {
	return WinrmValue{}
}

var _ basetypes.ObjectValuable = WinrmValue{}

type WinrmValue struct {
	Insecure basetypes.BoolValue   `tfsdk:"insecure"`
	Kerberos basetypes.ObjectValue `tfsdk:"kerberos"`
	Password basetypes.StringValue `tfsdk:"password"`
	Port     basetypes.Int64Value  `tfsdk:"port"`
	Protocol basetypes.StringValue `tfsdk:"protocol"`
	Timeout  basetypes.Int64Value  `tfsdk:"timeout"`
	Username basetypes.StringValue `tfsdk:"username"`
	state    attr.ValueState
}

func (v WinrmValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 7)

	var val tftypes.Value
	var err error

	attrTypes["insecure"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["kerberos"] = basetypes.ObjectType{
		AttrTypes: KerberosValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["password"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["port"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["protocol"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["timeout"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["username"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 7)

		val, err = v.Insecure.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["insecure"] = val

		val, err = v.Kerberos.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["kerberos"] = val

		val, err = v.Password.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["password"] = val

		val, err = v.Port.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["port"] = val

		val, err = v.Protocol.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["protocol"] = val

		val, err = v.Timeout.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["timeout"] = val

		val, err = v.Username.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["username"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v WinrmValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v WinrmValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v WinrmValue) String() string {
	return "WinrmValue"
}

func (v WinrmValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var kerberos basetypes.ObjectValue

	if v.Kerberos.IsNull() {
		kerberos = types.ObjectNull(
			KerberosValue{}.AttributeTypes(ctx),
		)
	}

	if v.Kerberos.IsUnknown() {
		kerberos = types.ObjectUnknown(
			KerberosValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Kerberos.IsNull() && !v.Kerberos.IsUnknown() {
		kerberos = types.ObjectValueMust(
			KerberosValue{}.AttributeTypes(ctx),
			v.Kerberos.Attributes(),
		)
	}

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"insecure": basetypes.BoolType{},
			"kerberos": basetypes.ObjectType{
				AttrTypes: KerberosValue{}.AttributeTypes(ctx),
			},
			"password": basetypes.StringType{},
			"port":     basetypes.Int64Type{},
			"protocol": basetypes.StringType{},
			"timeout":  basetypes.Int64Type{},
			"username": basetypes.StringType{},
		},
		map[string]attr.Value{
			"insecure": v.Insecure,
			"kerberos": kerberos,
			"password": v.Password,
			"port":     v.Port,
			"protocol": v.Protocol,
			"timeout":  v.Timeout,
			"username": v.Username,
		})

	return objVal, diags
}

func (v WinrmValue) Equal(o attr.Value) bool {
	other, ok := o.(WinrmValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Insecure.Equal(other.Insecure) {
		return false
	}

	if !v.Kerberos.Equal(other.Kerberos) {
		return false
	}

	if !v.Password.Equal(other.Password) {
		return false
	}

	if !v.Port.Equal(other.Port) {
		return false
	}

	if !v.Protocol.Equal(other.Protocol) {
		return false
	}

	if !v.Timeout.Equal(other.Timeout) {
		return false
	}

	if !v.Username.Equal(other.Username) {
		return false
	}

	return true
}

func (v WinrmValue) Type(ctx context.Context) attr.Type {
	return WinrmType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v WinrmValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"insecure": basetypes.BoolType{},
		"kerberos": basetypes.ObjectType{
			AttrTypes: KerberosValue{}.AttributeTypes(ctx),
		},
		"password": basetypes.StringType{},
		"port":     basetypes.Int64Type{},
		"protocol": basetypes.StringType{},
		"timeout":  basetypes.Int64Type{},
		"username": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = KerberosType{}

type KerberosType struct {
	basetypes.ObjectType
}

func (t KerberosType) Equal(o attr.Type) bool {
	other, ok := o.(KerberosType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t KerberosType) String() string {
	return "KerberosType"
}

func (t KerberosType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	krbConfigFileAttribute, ok := attributes["krb_config_file"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`krb_config_file is missing from object`)

		return nil, diags
	}

	krbConfigFileVal, ok := krbConfigFileAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`krb_config_file expected to be basetypes.StringValue, was: %T`, krbConfigFileAttribute))
	}

	realmAttribute, ok := attributes["realm"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`realm is missing from object`)

		return nil, diags
	}

	realmVal, ok := realmAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`realm expected to be basetypes.StringValue, was: %T`, realmAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return KerberosValue{
		KrbConfigFile: krbConfigFileVal,
		Realm:         realmVal,
		state:         attr.ValueStateKnown,
	}, diags
}

func NewKerberosValueNull() KerberosValue {
	return KerberosValue{
		state: attr.ValueStateNull,
	}
}

func NewKerberosValueUnknown() KerberosValue {
	return KerberosValue{
		state: attr.ValueStateUnknown,
	}
}

func NewKerberosValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (KerberosValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing KerberosValue Attribute Value",
				"While creating a KerberosValue value, a missing attribute value was detected. "+
					"A KerberosValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("KerberosValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid KerberosValue Attribute Type",
				"While creating a KerberosValue value, an invalid attribute value was detected. "+
					"A KerberosValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("KerberosValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("KerberosValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra KerberosValue Attribute Value",
				"While creating a KerberosValue value, an extra attribute value was detected. "+
					"A KerberosValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra KerberosValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewKerberosValueUnknown(), diags
	}

	krbConfigFileAttribute, ok := attributes["krb_config_file"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`krb_config_file is missing from object`)

		return NewKerberosValueUnknown(), diags
	}

	krbConfigFileVal, ok := krbConfigFileAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`krb_config_file expected to be basetypes.StringValue, was: %T`, krbConfigFileAttribute))
	}

	realmAttribute, ok := attributes["realm"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`realm is missing from object`)

		return NewKerberosValueUnknown(), diags
	}

	realmVal, ok := realmAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`realm expected to be basetypes.StringValue, was: %T`, realmAttribute))
	}

	if diags.HasError() {
		return NewKerberosValueUnknown(), diags
	}

	return KerberosValue{
		KrbConfigFile: krbConfigFileVal,
		Realm:         realmVal,
		state:         attr.ValueStateKnown,
	}, diags
}

func NewKerberosValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) KerberosValue {
	object, diags := NewKerberosValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewKerberosValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t KerberosType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewKerberosValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewKerberosValueUnknown(), nil
	}

	if in.IsNull() {
		return NewKerberosValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewKerberosValueMust(KerberosValue{}.AttributeTypes(ctx), attributes), nil
}

func (t KerberosType) ValueType(ctx context.Context) attr.Value {
	return KerberosValue{}
}

var _ basetypes.ObjectValuable = KerberosValue{}

type KerberosValue struct {
	KrbConfigFile basetypes.StringValue `tfsdk:"krb_config_file"`
	Realm         basetypes.StringValue `tfsdk:"realm"`
	state         attr.ValueState
}

func (v KerberosValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["krb_config_file"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["realm"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.KrbConfigFile.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["krb_config_file"] = val

		val, err = v.Realm.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["realm"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v KerberosValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v KerberosValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v KerberosValue) String() string {
	return "KerberosValue"
}

func (v KerberosValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"krb_config_file": basetypes.StringType{},
			"realm":           basetypes.StringType{},
		},
		map[string]attr.Value{
			"krb_config_file": v.KrbConfigFile,
			"realm":           v.Realm,
		})

	return objVal, diags
}

func (v KerberosValue) Equal(o attr.Value) bool {
	other, ok := o.(KerberosValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.KrbConfigFile.Equal(other.KrbConfigFile) {
		return false
	}

	if !v.Realm.Equal(other.Realm) {
		return false
	}

	return true
}

func (v KerberosValue) Type(ctx context.Context) attr.Type {
	return KerberosType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v KerberosValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"krb_config_file": basetypes.StringType{},
		"realm":           basetypes.StringType{},
	}
}
