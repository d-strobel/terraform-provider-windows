// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_local_users

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-timetypes/timetypes"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func LocalUsersDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"users": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"account_expires": schema.StringAttribute{
							CustomType:          timetypes.RFC3339Type{},
							Computed:            true,
							Description:         "Retrieve the time where the local user account expires.",
							MarkdownDescription: "Retrieve the time where the local user account expires.",
						},
						"description": schema.StringAttribute{
							Computed:            true,
							Description:         "The description of the local user.",
							MarkdownDescription: "The description of the local user.",
						},
						"enabled": schema.BoolAttribute{
							Computed:            true,
							Description:         "Get the status of the local user.",
							MarkdownDescription: "Get the status of the local user.",
						},
						"full_name": schema.StringAttribute{
							Computed:            true,
							Description:         "The full name of the local user.",
							MarkdownDescription: "The full name of the local user.",
						},
						"id": schema.StringAttribute{
							Computed:            true,
							Description:         "The ID of the retrieved local user. This is the same as the SID.",
							MarkdownDescription: "The ID of the retrieved local user. This is the same as the SID.",
						},
						"last_logon": schema.StringAttribute{
							CustomType:          timetypes.RFC3339Type{},
							Computed:            true,
							Description:         "The last logon time of the local user.",
							MarkdownDescription: "The last logon time of the local user.",
						},
						"name": schema.StringAttribute{
							Required:            true,
							Description:         "Define the name of the local user.",
							MarkdownDescription: "Define the name of the local user.",
						},
						"password_changeable_date": schema.StringAttribute{
							CustomType:          timetypes.RFC3339Type{},
							Computed:            true,
							Description:         "The password changeable date of the local user.",
							MarkdownDescription: "The password changeable date of the local user.",
						},
						"password_expires": schema.StringAttribute{
							CustomType:          timetypes.RFC3339Type{},
							Computed:            true,
							Description:         "The time when the password of the local user expires.",
							MarkdownDescription: "The time when the password of the local user expires.",
						},
						"password_last_set": schema.StringAttribute{
							CustomType:          timetypes.RFC3339Type{},
							Computed:            true,
							Description:         "The last time when the password was set for the local user.",
							MarkdownDescription: "The last time when the password was set for the local user.",
						},
						"password_required": schema.BoolAttribute{
							Computed:            true,
							Description:         "If true a password is required login with the local user.",
							MarkdownDescription: "If true a password is required login with the local user.",
						},
						"sid": schema.StringAttribute{
							Optional:            true,
							Description:         "The security ID of the local user.",
							MarkdownDescription: "The security ID of the local user.",
						},
						"user_may_change_password": schema.BoolAttribute{
							Computed:            true,
							Description:         "If true the local user can change it's password.",
							MarkdownDescription: "If true the local user can change it's password.",
						},
					},
					CustomType: UsersType{
						ObjectType: types.ObjectType{
							AttrTypes: UsersValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed: true,
			},
		},
	}
}

type LocalUsersModel struct {
	Users types.List `tfsdk:"users"`
}

var _ basetypes.ObjectTypable = UsersType{}

type UsersType struct {
	basetypes.ObjectType
}

func (t UsersType) Equal(o attr.Type) bool {
	other, ok := o.(UsersType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t UsersType) String() string {
	return "UsersType"
}

func (t UsersType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	accountExpiresAttribute, ok := attributes["account_expires"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`account_expires is missing from object`)

		return nil, diags
	}

	accountExpiresVal, ok := accountExpiresAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`account_expires expected to be basetypes.StringValue, was: %T`, accountExpiresAttribute))
	}

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return nil, diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return nil, diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	fullNameAttribute, ok := attributes["full_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`full_name is missing from object`)

		return nil, diags
	}

	fullNameVal, ok := fullNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`full_name expected to be basetypes.StringValue, was: %T`, fullNameAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	lastLogonAttribute, ok := attributes["last_logon"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`last_logon is missing from object`)

		return nil, diags
	}

	lastLogonVal, ok := lastLogonAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`last_logon expected to be basetypes.StringValue, was: %T`, lastLogonAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	passwordChangeableDateAttribute, ok := attributes["password_changeable_date"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`password_changeable_date is missing from object`)

		return nil, diags
	}

	passwordChangeableDateVal, ok := passwordChangeableDateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`password_changeable_date expected to be basetypes.StringValue, was: %T`, passwordChangeableDateAttribute))
	}

	passwordExpiresAttribute, ok := attributes["password_expires"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`password_expires is missing from object`)

		return nil, diags
	}

	passwordExpiresVal, ok := passwordExpiresAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`password_expires expected to be basetypes.StringValue, was: %T`, passwordExpiresAttribute))
	}

	passwordLastSetAttribute, ok := attributes["password_last_set"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`password_last_set is missing from object`)

		return nil, diags
	}

	passwordLastSetVal, ok := passwordLastSetAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`password_last_set expected to be basetypes.StringValue, was: %T`, passwordLastSetAttribute))
	}

	passwordRequiredAttribute, ok := attributes["password_required"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`password_required is missing from object`)

		return nil, diags
	}

	passwordRequiredVal, ok := passwordRequiredAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`password_required expected to be basetypes.BoolValue, was: %T`, passwordRequiredAttribute))
	}

	sidAttribute, ok := attributes["sid"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sid is missing from object`)

		return nil, diags
	}

	sidVal, ok := sidAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sid expected to be basetypes.StringValue, was: %T`, sidAttribute))
	}

	userMayChangePasswordAttribute, ok := attributes["user_may_change_password"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`user_may_change_password is missing from object`)

		return nil, diags
	}

	userMayChangePasswordVal, ok := userMayChangePasswordAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`user_may_change_password expected to be basetypes.BoolValue, was: %T`, userMayChangePasswordAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return UsersValue{
		AccountExpires:         accountExpiresVal,
		Description:            descriptionVal,
		Enabled:                enabledVal,
		FullName:               fullNameVal,
		Id:                     idVal,
		LastLogon:              lastLogonVal,
		Name:                   nameVal,
		PasswordChangeableDate: passwordChangeableDateVal,
		PasswordExpires:        passwordExpiresVal,
		PasswordLastSet:        passwordLastSetVal,
		PasswordRequired:       passwordRequiredVal,
		Sid:                    sidVal,
		UserMayChangePassword:  userMayChangePasswordVal,
		state:                  attr.ValueStateKnown,
	}, diags
}

func NewUsersValueNull() UsersValue {
	return UsersValue{
		state: attr.ValueStateNull,
	}
}

func NewUsersValueUnknown() UsersValue {
	return UsersValue{
		state: attr.ValueStateUnknown,
	}
}

func NewUsersValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (UsersValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing UsersValue Attribute Value",
				"While creating a UsersValue value, a missing attribute value was detected. "+
					"A UsersValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("UsersValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid UsersValue Attribute Type",
				"While creating a UsersValue value, an invalid attribute value was detected. "+
					"A UsersValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("UsersValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("UsersValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra UsersValue Attribute Value",
				"While creating a UsersValue value, an extra attribute value was detected. "+
					"A UsersValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra UsersValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewUsersValueUnknown(), diags
	}

	accountExpiresAttribute, ok := attributes["account_expires"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`account_expires is missing from object`)

		return NewUsersValueUnknown(), diags
	}

	accountExpiresVal, ok := accountExpiresAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`account_expires expected to be basetypes.StringValue, was: %T`, accountExpiresAttribute))
	}

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return NewUsersValueUnknown(), diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return NewUsersValueUnknown(), diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	fullNameAttribute, ok := attributes["full_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`full_name is missing from object`)

		return NewUsersValueUnknown(), diags
	}

	fullNameVal, ok := fullNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`full_name expected to be basetypes.StringValue, was: %T`, fullNameAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewUsersValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	lastLogonAttribute, ok := attributes["last_logon"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`last_logon is missing from object`)

		return NewUsersValueUnknown(), diags
	}

	lastLogonVal, ok := lastLogonAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`last_logon expected to be basetypes.StringValue, was: %T`, lastLogonAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewUsersValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	passwordChangeableDateAttribute, ok := attributes["password_changeable_date"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`password_changeable_date is missing from object`)

		return NewUsersValueUnknown(), diags
	}

	passwordChangeableDateVal, ok := passwordChangeableDateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`password_changeable_date expected to be basetypes.StringValue, was: %T`, passwordChangeableDateAttribute))
	}

	passwordExpiresAttribute, ok := attributes["password_expires"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`password_expires is missing from object`)

		return NewUsersValueUnknown(), diags
	}

	passwordExpiresVal, ok := passwordExpiresAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`password_expires expected to be basetypes.StringValue, was: %T`, passwordExpiresAttribute))
	}

	passwordLastSetAttribute, ok := attributes["password_last_set"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`password_last_set is missing from object`)

		return NewUsersValueUnknown(), diags
	}

	passwordLastSetVal, ok := passwordLastSetAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`password_last_set expected to be basetypes.StringValue, was: %T`, passwordLastSetAttribute))
	}

	passwordRequiredAttribute, ok := attributes["password_required"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`password_required is missing from object`)

		return NewUsersValueUnknown(), diags
	}

	passwordRequiredVal, ok := passwordRequiredAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`password_required expected to be basetypes.BoolValue, was: %T`, passwordRequiredAttribute))
	}

	sidAttribute, ok := attributes["sid"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sid is missing from object`)

		return NewUsersValueUnknown(), diags
	}

	sidVal, ok := sidAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sid expected to be basetypes.StringValue, was: %T`, sidAttribute))
	}

	userMayChangePasswordAttribute, ok := attributes["user_may_change_password"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`user_may_change_password is missing from object`)

		return NewUsersValueUnknown(), diags
	}

	userMayChangePasswordVal, ok := userMayChangePasswordAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`user_may_change_password expected to be basetypes.BoolValue, was: %T`, userMayChangePasswordAttribute))
	}

	if diags.HasError() {
		return NewUsersValueUnknown(), diags
	}

	return UsersValue{
		AccountExpires:         accountExpiresVal,
		Description:            descriptionVal,
		Enabled:                enabledVal,
		FullName:               fullNameVal,
		Id:                     idVal,
		LastLogon:              lastLogonVal,
		Name:                   nameVal,
		PasswordChangeableDate: passwordChangeableDateVal,
		PasswordExpires:        passwordExpiresVal,
		PasswordLastSet:        passwordLastSetVal,
		PasswordRequired:       passwordRequiredVal,
		Sid:                    sidVal,
		UserMayChangePassword:  userMayChangePasswordVal,
		state:                  attr.ValueStateKnown,
	}, diags
}

func NewUsersValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) UsersValue {
	object, diags := NewUsersValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewUsersValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t UsersType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewUsersValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewUsersValueUnknown(), nil
	}

	if in.IsNull() {
		return NewUsersValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewUsersValueMust(UsersValue{}.AttributeTypes(ctx), attributes), nil
}

func (t UsersType) ValueType(ctx context.Context) attr.Value {
	return UsersValue{}
}

var _ basetypes.ObjectValuable = UsersValue{}

type UsersValue struct {
	AccountExpires         basetypes.StringValue `tfsdk:"account_expires"`
	Description            basetypes.StringValue `tfsdk:"description"`
	Enabled                basetypes.BoolValue   `tfsdk:"enabled"`
	FullName               basetypes.StringValue `tfsdk:"full_name"`
	Id                     basetypes.StringValue `tfsdk:"id"`
	LastLogon              basetypes.StringValue `tfsdk:"last_logon"`
	Name                   basetypes.StringValue `tfsdk:"name"`
	PasswordChangeableDate basetypes.StringValue `tfsdk:"password_changeable_date"`
	PasswordExpires        basetypes.StringValue `tfsdk:"password_expires"`
	PasswordLastSet        basetypes.StringValue `tfsdk:"password_last_set"`
	PasswordRequired       basetypes.BoolValue   `tfsdk:"password_required"`
	Sid                    basetypes.StringValue `tfsdk:"sid"`
	UserMayChangePassword  basetypes.BoolValue   `tfsdk:"user_may_change_password"`
	state                  attr.ValueState
}

func (v UsersValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 13)

	var val tftypes.Value
	var err error

	attrTypes["account_expires"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["description"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["full_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["last_logon"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["password_changeable_date"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["password_expires"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["password_last_set"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["password_required"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["sid"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["user_may_change_password"] = basetypes.BoolType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 13)

		val, err = v.AccountExpires.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["account_expires"] = val

		val, err = v.Description.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["description"] = val

		val, err = v.Enabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["enabled"] = val

		val, err = v.FullName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["full_name"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.LastLogon.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["last_logon"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.PasswordChangeableDate.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["password_changeable_date"] = val

		val, err = v.PasswordExpires.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["password_expires"] = val

		val, err = v.PasswordLastSet.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["password_last_set"] = val

		val, err = v.PasswordRequired.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["password_required"] = val

		val, err = v.Sid.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sid"] = val

		val, err = v.UserMayChangePassword.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["user_may_change_password"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v UsersValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v UsersValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v UsersValue) String() string {
	return "UsersValue"
}

func (v UsersValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"account_expires":          basetypes.StringType{},
			"description":              basetypes.StringType{},
			"enabled":                  basetypes.BoolType{},
			"full_name":                basetypes.StringType{},
			"id":                       basetypes.StringType{},
			"last_logon":               basetypes.StringType{},
			"name":                     basetypes.StringType{},
			"password_changeable_date": basetypes.StringType{},
			"password_expires":         basetypes.StringType{},
			"password_last_set":        basetypes.StringType{},
			"password_required":        basetypes.BoolType{},
			"sid":                      basetypes.StringType{},
			"user_may_change_password": basetypes.BoolType{},
		},
		map[string]attr.Value{
			"account_expires":          v.AccountExpires,
			"description":              v.Description,
			"enabled":                  v.Enabled,
			"full_name":                v.FullName,
			"id":                       v.Id,
			"last_logon":               v.LastLogon,
			"name":                     v.Name,
			"password_changeable_date": v.PasswordChangeableDate,
			"password_expires":         v.PasswordExpires,
			"password_last_set":        v.PasswordLastSet,
			"password_required":        v.PasswordRequired,
			"sid":                      v.Sid,
			"user_may_change_password": v.UserMayChangePassword,
		})

	return objVal, diags
}

func (v UsersValue) Equal(o attr.Value) bool {
	other, ok := o.(UsersValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AccountExpires.Equal(other.AccountExpires) {
		return false
	}

	if !v.Description.Equal(other.Description) {
		return false
	}

	if !v.Enabled.Equal(other.Enabled) {
		return false
	}

	if !v.FullName.Equal(other.FullName) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.LastLogon.Equal(other.LastLogon) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.PasswordChangeableDate.Equal(other.PasswordChangeableDate) {
		return false
	}

	if !v.PasswordExpires.Equal(other.PasswordExpires) {
		return false
	}

	if !v.PasswordLastSet.Equal(other.PasswordLastSet) {
		return false
	}

	if !v.PasswordRequired.Equal(other.PasswordRequired) {
		return false
	}

	if !v.Sid.Equal(other.Sid) {
		return false
	}

	if !v.UserMayChangePassword.Equal(other.UserMayChangePassword) {
		return false
	}

	return true
}

func (v UsersValue) Type(ctx context.Context) attr.Type {
	return UsersType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v UsersValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"account_expires":          basetypes.StringType{},
		"description":              basetypes.StringType{},
		"enabled":                  basetypes.BoolType{},
		"full_name":                basetypes.StringType{},
		"id":                       basetypes.StringType{},
		"last_logon":               basetypes.StringType{},
		"name":                     basetypes.StringType{},
		"password_changeable_date": basetypes.StringType{},
		"password_expires":         basetypes.StringType{},
		"password_last_set":        basetypes.StringType{},
		"password_required":        basetypes.BoolType{},
		"sid":                      basetypes.StringType{},
		"user_may_change_password": basetypes.BoolType{},
	}
}
